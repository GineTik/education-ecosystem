datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

/* generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}
 */

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  firstName String?
  lastName String?
  accounts Account[]
  avatarUrl String?
  refreshToken String?

  role Role @relation(fields: [roleSlug], references: [slug])
  roleSlug String

  instance InstitutionInstance? @relation(fields: [instanceId], references: [id])
  instanceId String?
}

model Role {
  slug      String @id 
  
  name String
  description String

  User User[]
  permissions Permission[]
}

model Permission {
  slug      String @id

  name String
  description String

  roles Role[]
}

model Account {
  email     String   @unique @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  googleAccessToken String?
  googleRefreshToken String?
  googleEmailVerified Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
  userId String
}

model ExternalLinks {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String
  name String
  emoji String
  scope ExternalLinkScope

  institutionInstance InstitutionInstance? @relation(fields: [institutionInstanceId], references: [id])
  institutionInstanceId String?
}

model Articles {
  id        String   @id @default(uuid())
  slug String @unique

  title String
  content String

  isPublished Boolean @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExternalLinkScope {
  INSTITUTION
  GROUP
  STUDENT
}

model InstitutionInstance {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  institutionName String
  validMailDomains String[]

  modules InstitutionInstanceModule[]
  User User[]
  externalLinks ExternalLinks[]
}

model InstitutionInstanceModule {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  baseURL String
  isEnabled Boolean @default(true)
  status String
  apiKey String?

  expectedMajorVersion Int
  expectedMinorVersion Int

  instance InstitutionInstance @relation(fields: [instanceId], references: [id])
  instanceId String

  type InstitutionInstanceModuleType @relation(fields: [typeSlug], references: [slug])
  typeSlug String

  @@unique([instanceId, typeSlug])
}

model InstitutionInstanceModuleType {
  slug      String @id

  name      String
  description String?

  modules InstitutionInstanceModule[]
}
